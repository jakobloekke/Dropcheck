<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>
			DropCheck
		</title>
		<meta name="author" content="Jakob LÃ¸kke Madsen">
		
		<!-- Mobile viewport optimization http://goo.gl/b9SaQ -->
		<meta name="HandheldFriendly" content="True">
		<meta name="MobileOptimized" content="320" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">

		<!--iOS web app -->
		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black">
		<link rel="apple-touch-icon" href="dropcheck-lib/logo.png">
		<link rel="apple-touch-startup-image" href="dropcheck-lib/splash.png">
		
		<link rel="stylesheet" href="/dropcheck-lib/style.css" type="text/css" media="screen" charset="utf-8">
		
		<script type="text/javascript" src="dropcheck-lib/jquery.js"></script>
		<script type="text/javascript" src="dropcheck-lib/jquery.tmpl.js"></script>
		<script type="text/javascript" src="dropcheck-lib/knockout.js"></script>
		<script type="text/javascript" charset="utf-8">

			// "Vare" class
			var vare = function(bought, text, soldout) {
				this.bought = ko.observable(bought);
				this.text = text;
				this.soldout = ko.observable(soldout);
			};

			// Declare viewModel
			var viewModel = {
				varer: ko.observableArray(),
				sortByBought: function() {
					this.varer.sort(function (a, b) {
						return a.bought() < b.bought() ? -1 : 1;
			        });
			    },
				sortBySoldout: function() {
					this.varer.sort(function (a, b) {
						return a.soldout() < b.soldout() ? -1 : 1;
			        });
			    },
				save: function() {
					var forStorage = ko.toJSON(viewModel);
					localStorage.setItem("viewModel", forStorage);
				},
				reset: function() {
					localStorage.removeItem("viewModel");
					location.reload();
				}
			};
			
			//If saved viewModel exists in localStorage, render that:
			var savedViewModel = localStorage.getItem("viewModel");
			if (savedViewModel) 
			{	
				$( JSON.parse(savedViewModel).varer ).each(function(){
					viewModel.varer().push(
						new vare(this.bought, this.text, this.soldout)
					) 
				});
				$(function(){
					ko.applyBindings(viewModel);
				});
			}
			
			// ... else initialize viewModel from Dropbox textfile
			else 
			{	
				$.ajax("dropcheck-list.txt", {
					dataType: "text",
					success: function(data){
						var lines = data.split("\n");
						$(lines).each(function(){ 
							viewModel.varer().push(
								new vare(0, this.toString(), 0)
							) 
						});
						ko.applyBindings(viewModel);
					}
				})
			}
		</script>
		
		<script id='vareTemplate' type='text/html'>	
			<tr data-bind="css: { bought: bought(), soldout: soldout() }">
				<td class="checkbox"><input type="checkbox" data-bind="checked: bought, disable: soldout()" /></td>
				<td>${ text }</td>
				<td class="checkbox"><input type="checkbox" data-bind="checked: soldout, disable: bought()" /></td>
			</tr>
		</script>
		
		<script id='varelisteTemplate' type='text/html'>
			<table>
				<thead>
					<tr>
						<th style="color:green">Yes</th>
						<th></th>
						<th style="color:red">No</th>
					</tr>
				</thead>
				<tbody data-bind="template: {name: 'vareTemplate', foreach: varer}"></tbody>
				<tfoot>
					<tr>
						<th><a href="#" data-bind="click: sortByBought">Yes</a></th>
						<th>&larr; Click to move checked to bottom &rarr;</th>
						<th><a href="#" data-bind="click: sortBySoldout">No</a></th>
					</tr>
				</tfoot>
			</table>
			<a id="reset" href="#" data-bind="click: reset">Reset to Dropbox file</a>
		</script>
		
		<script type="text/javascript">
			//Autosave viewmodel:
			$(function(){
				(function(){
				    viewModel.save();
				    setTimeout(arguments.callee, 10000);
				})();
			})
		</script>
	</head>
	<body data-bind="template: 'varelisteTemplate'" />
</html>
